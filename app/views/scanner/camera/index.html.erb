<%# app/views/scanner/camera.html.erb %>
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
  <title>Inventory Scanner</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/jsqr@1.4.0/dist/jsQR.min.js"></script>
  <style>
      body, html {
          margin: 0;
          padding: 0;
          height: 100%;
          overflow: hidden;
      }

  </style>
</head>
<body class="">
<video id="video" playsinline></video>
<div class="ui-overlay">
  <div id="scanResult" class="text-sm"></div>
  <div class="capture-button p-2 " id="captureButton"></div>
  <div class="side-buttons">
    <div class="side-button p-2 bg-slate-200" id="cameraButton"><i class="fas fa-camera"></i></div>
    <div class="side-button p-2 bg-slate-200" id="settingsButton"><i class="fas fa-cog"></i></div>
    <div class="side-button p-2 bg-slate-200" id="darkModeButton"><i class="fas fa-moon"></i></div>
    <div class="side-button p-2 bg-slate-200" id="qrCodeButton"><i class="fas fa-qrcode"></i></div>
    <div class="side-button p-2 bg-slate-200" id="analysisButton"><i class="fas fa-chart-bar"></i></div>
  </div>
  <div class="image-preview" id="imagePreview"></div>
  <div class="progress-bar"><div class="progress-bar-fill" id="progressBar"></div></div>
</div>

<script>

    // DOM elements
    const video = document.getElementById('video');
    const captureButton = document.getElementById('captureButton');
    const scanResult = document.getElementById('scanResult');
    const imagePreview = document.getElementById('imagePreview');
    const progressBar = document.getElementById('progressBar');
    const cameraButton = document.getElementById('cameraButton');
    const settingsButton = document.getElementById('settingsButton');
    const darkModeButton = document.getElementById('darkModeButton');
    const qrCodeButton = document.getElementById('qrCodeButton');
    const analysisButton = document.getElementById('analysisButton');

    // State variables
    let capturedImages = [];
    let currentCameraIndex = 0;
    let cameras = [];
    let scanning = false;
    let scannerOverlay = null;

    // QR scanning setup
    let qrCanvas = document.createElement('canvas');
    let qrContext = qrCanvas.getContext('2d', { willReadFrequently: true });

    // Start the camera with specific constraints
    async function startCamera(requestedFacingMode = 'environment') {
        try {
            // Get list of cameras
            const devices = await navigator.mediaDevices.enumerateDevices();
            cameras = devices.filter(device => device.kind === 'videoinput');
            console.log('Available cameras:', cameras);

            if (cameras.length === 0) {
                throw new Error('No cameras found');
            }

            // Stop any existing stream
            if (video.srcObject) {
                video.srcObject.getTracks().forEach(track => track.stop());
            }

            // Set up constraints
            const constraints = {
                video: {
                    facingMode: requestedFacingMode,
                    width: { ideal: 1920 },
                    height: { ideal: 1080 },
                    aspectRatio: { ideal: 1.7777777778 }
                },
                audio: false
            };

            console.log('Requesting camera with constraints:', constraints);
            const stream = await navigator.mediaDevices.getUserMedia(constraints);
            video.srcObject = stream;

            // Wait for video to be ready
            await new Promise((resolve) => {
                video.onloadedmetadata = () => {
                    video.play().then(resolve);
                };
            });

            console.log('Camera started successfully');
            return true;

        } catch (error) {
            console.error("Camera start error:", error);
            showResult(`Camera error: ${error.message}`);
            return false;
        }
    }

    // Enhanced camera switch function
    async function switchCamera() {
        const currentFacingMode = currentCameraIndex === 0 ? 'environment' : 'user';
        const newFacingMode = currentFacingMode === 'environment' ? 'user' : 'environment';

        currentCameraIndex = (currentCameraIndex + 1) % 2;
        console.log(`Switching to camera: ${newFacingMode}`);

        await startCamera(newFacingMode);
    }

    // Capture image function
    function captureImage() {
        qrCanvas.width = video.videoWidth;
        qrCanvas.height = video.videoHeight;
        qrContext.drawImage(video, 0, 0, qrCanvas.width, qrCanvas.height);
        const imageDataUrl = qrCanvas.toDataURL('image/jpeg');
        capturedImages.push(imageDataUrl);
        updateImagePreview();

        if (capturedImages.length >= 4) {
            processImages();
        }
    }

    // Update image preview
    function updateImagePreview() {
        imagePreview.innerHTML = '';
        capturedImages.forEach(img => {
            const imgElement = document.createElement('img');
            imgElement.src = img;
            imagePreview.appendChild(imgElement);
        });
    }

    // Process captured images
    async function processImages() {
        showResult("Processing images...");

        await simulateProcessing("Running YOLO", 33);
        await simulateProcessing("Running SAM", 66);
        await simulateProcessing("Running LightGlue", 100);

        setTimeout(() => {
            const mockResult = {
                sku: "INV" + Math.floor(Math.random() * 10000),
                price: "$" + (Math.random() * 100).toFixed(2),
                name: "Sample Product " + Math.floor(Math.random() * 100)
            };
            showResult(`Analysis Complete\nSKU: ${mockResult.sku}\nPrice: ${mockResult.price}\nName: ${mockResult.name}`);
        }, 1000);
    }

    // Simulate processing steps
    function simulateProcessing(step, progress) {
        return new Promise(resolve => {
            showResult(step);
            progressBar.style.width = `${progress}%`;
            setTimeout(resolve, 1000);
        });
    }

    // QR Scanning functions
    function startQRScanning() {
        if (!scanning) return;

        try {
            if (video.readyState === video.HAVE_ENOUGH_DATA &&
                video.videoWidth > 0 &&
                video.videoHeight > 0) {

                // Set canvas size to match video
                qrCanvas.width = video.videoWidth;
                qrCanvas.height = video.videoHeight;

                // Draw current video frame
                qrContext.drawImage(video, 0, 0, qrCanvas.width, qrCanvas.height);

                // Get image data for QR detection
                const imageData = qrContext.getImageData(0, 0, qrCanvas.width, qrCanvas.height);

                // Attempt QR code detection
                const code = jsQR(imageData.data, imageData.width, imageData.height, {
                    inversionAttempts: "dontInvert",
                });

                if (code) {
                    console.log("QR Code detected:", code.data);
                    handleQRCode(code.data);
                    return;
                }
            }

            // Continue scanning
            if (scanning) {
                requestAnimationFrame(startQRScanning);
            }
        } catch (error) {
            console.error("QR scanning error:", error);
            showResult("QR scanning error");
        }
    }

    // Handle QR code data
    async function handleQRCode(data) {
        // UUID validation
        const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
        if (!uuidRegex.test(data)) {
            showResult("Invalid QR code format");
            return;
        }

        showResult("Processing QR code...");
        progressBar.style.width = '33%';

        try {
            // Use Turbo to load the product quickview
            const response = await fetch(`/scanner/lookup/${data}`, {
                headers: {
                    'Accept': 'text/vnd.turbo-stream.html',
                    'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
                }
            });

            if (!response.ok) throw new Error('Product not found');

            const html = await response.text();
            Turbo.renderStreamMessage(html);

            progressBar.style.width = '100%';
            showResult("Product found!");

            // Pause scanning while showing product
            scanning = false;
            if (scannerOverlay) {
                scannerOverlay.style.display = 'none';
            }
            qrCodeButton.classList.remove('bg-blue-500');

        } catch (error) {
            console.error('Product lookup error:', error);
            showResult("Product not found");
            progressBar.style.width = '0%';
        }
    }

    // Create scanner overlay
    function createScannerOverlay() {
        scannerOverlay = document.createElement('div');
        scannerOverlay.className = 'scanner-overlay';
        scannerOverlay.style.cssText = `
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 250px;
        height: 250px;
        border: 2px solid rgba(255, 255, 255, 0.5);
        border-radius: 20px;
        box-shadow: 0 0 0 9999px rgba(0, 0, 0, 0.5);
    `;

        const scanLine = document.createElement('div');
        scanLine.style.cssText = `
        position: absolute;
        width: 100%;
        height: 2px;
        background: #00ff00;
        animation: scan 2s linear infinite;
    `;

        const style = document.createElement('style');
        style.textContent = `
        @keyframes scan {
            0% { top: 0; }
            100% { top: 100%; }
        }
    `;

        document.head.appendChild(style);
        scannerOverlay.appendChild(scanLine);
        document.querySelector('.ui-overlay').appendChild(scannerOverlay);
    }

    // Toggle QR scanning mode
    function toggleQRMode() {
        scanning = !scanning;

        if (scanning) {
            if (!scannerOverlay) {
                createScannerOverlay();
            }
            scannerOverlay.style.display = 'block';
            qrCodeButton.classList.add('bg-blue-500');
            showResult("QR scanning active");
            startQRScanning();
            console.log("QR scanning started");
        } else {
            if (scannerOverlay) {
                scannerOverlay.style.display = 'none';
            }
            qrCodeButton.classList.remove('bg-blue-500');
            showResult("QR scanning disabled");
            console.log("QR scanning stopped");
        }
    }

    // Show result message
    function showResult(message) {
        console.log("Scanner message:", message);
        scanResult.textContent = message;
        scanResult.style.display = 'block';
        setTimeout(() => {
            scanResult.style.display = 'none';
        }, 3000);
    }

    // Toggle dark mode
    function toggleDarkMode() {
        document.body.classList.toggle('dark');
    }

    // Event listeners
    captureButton.addEventListener('click', captureImage);
    cameraButton.addEventListener('click', () => {
        console.log("Camera switch requested");
        switchCamera();
    });
    darkModeButton.addEventListener('click', toggleDarkMode);
    settingsButton.addEventListener('click', () => showResult("Settings clicked"));
    qrCodeButton.addEventListener('click', () => {
        console.log("QR mode toggle requested");
        toggleQRMode();
    });
    analysisButton.addEventListener('click', () => showResult("Analysis clicked"));

    // Initialize on page load
    document.addEventListener('DOMContentLoaded', () => {
        console.log("Initializing camera...");
        startCamera('environment');
    });

    // Cleanup on page unload
    window.addEventListener('beforeunload', () => {
        if (video.srcObject) {
            video.srcObject.getTracks().forEach(track => track.stop());
        }
    });

</script>
</body>
</html>
<!-- app/views/scanner/camera.html.erb
<!doctype html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>QR Code Scanner</title>

  <script src="https://cdn.tailwindcss.com"></script>

  <script src="https://cdn.jsdelivr.net/npm/jsqr@1.4.0/dist/jsQR.min.js"></script>

  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet" />

  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />

  <style>
      body,
      html {
          margin: 0;
          padding: 0;
          height: 100%;
          overflow: hidden;
      }
      #video {
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          object-fit: cover;
      }
      #scanResult {
          position: fixed;
          top: 20px;
          left: 20px;
          right: 20px;
          background-color: rgba(0, 0, 0, 0.7);
          color: white;
          padding: 10px;
          border-radius: 8px;
          display: none;
          z-index: 1000;
      }
      .capture-button {
          position: fixed;
          bottom: 40px;
          left: 50%;
          transform: translateX(-50%);
          width: 70px;
          height: 70px;
          border-radius: 50%;
          background-color: rgba(255, 255, 255, 0.3);
          border: 3px solid white;
          display: flex;
          justify-content: center;
          align-items: center;
          cursor: pointer;
          z-index: 1000;
      }
      .capture-button::after {
          content: "";
          width: 54px;
          height: 54px;
          background-color: white;
          border-radius: 50%;
      }
      .side-buttons {
          position: fixed;
          right: 20px;
          top: 50%;
          transform: translateY(-50%);
          display: flex;
          flex-direction: column;
          gap: 20px;
          z-index: 1000;
      }
      .side-button {
          width: 50px;
          height: 50px;
          border-radius: 50%;
          background-color: rgba(255, 255, 255, 0.3);
          display: flex;
          justify-content: center;
          align-items: center;
          color: white;
          font-size: 24px;
          cursor: pointer;
      }
      /* Modal Styles */
      .modal {
          display: none; /* Hidden by default */
          position: fixed;
          z-index: 2000; /* Sit on top */
          left: 0;
          top: 0;
          width: 100%;
          height: 100%;
          overflow: auto; /* Enable scroll if needed */
          background-color: rgba(0, 0, 0, 0.5); /* Black w/ opacity */
      }
      .modal-content {
          background-color: #fefefe;
          margin: 10% auto; /* 10% from the top and centered */
          padding: 20px;
          border: 1px solid #888;
          width: 90%;
          max-width: 400px; /* Could be more or less, depending on screen size */
          border-radius: 8px;
      }
      .close-button {
          color: #aaa;
          float: right;
          font-size: 28px;
          font-weight: bold;
          cursor: pointer;
      }
      .close-button:hover,
      .close-button:focus {
          color: black;
          text-decoration: none;
      }
  </style>
</head>
<body class="bg-black" data-controller="camera-scanner">
<video id="video" playsinline data-camera-scanner-target="video"></video>
<div id="scanResult" data-camera-scanner-target="scanResult" class="text-sm hidden"></div>
<div class="capture-button" id="captureButton" data-action="click->camera-scanner#toggleQRMode" data-camera-scanner-target="qrButton"></div>
<div class="side-buttons">
  <div class="side-button" data-action="click->camera-scanner#switchCamera"><i class="fas fa-camera"></i></div>
  <div class="side-button" data-action="click->camera-scanner#showSettings"><i class="fas fa-cog"></i></div>
  <div class="side-button" data-action="click->camera-scanner#toggleDarkMode"><i class="fas fa-moon"></i></div>

</div>


<div id="product_details" class="fixed bottom-0 left-0 right-0 bg-white p-4 shadow-lg hidden">

</div>


<div id="actionModal" class="modal">
  <div class="modal-content">
    <span class="close-button">&times;</span>
    <h2 class="text-xl font-semibold mb-4">QR Code Actions</h2>
    <div id="modalOptions" class="flex flex-col gap-4">

    </div>
  </div>
</div>

<script>
    // Initialize Stimulus controllers
    import { Application } from "stimulus"
    import CameraScannerController from "controllers/camera_scanner_controller"

    const application = Application.start()
    application.register("camera-scanner", CameraScannerController)
</script>
</body>
</html>
<%# app/views/scanner/camera/index.html.erb %>

<div class="relative h-screen overflow-hidden bg-black" data-controller="camera-scanner">
  <video
    data-camera-scanner-target="video"
    class="w-full h-full object-cover"
    playsinline
    autoplay
  ></video>

  <%# Scanner Overlay %>
  <div
    data-camera-scanner-target="scannerOverlay"
    class="hidden absolute inset-0 bg-black bg-opacity-50"
  >
    <div class="scanner-frame absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2">
      <div class="relative w-64 h-64 border-2 border-white rounded-lg">
        <div class="absolute inset-0 border-2 border-transparent">
          <%# Scanning line animation %>
          <div class="absolute top-0 left-0 right-0 h-0.5 bg-green-500 animate-scan"></div>

          <%# Corner markers %>
          <div class="absolute top-0 left-0 w-8 h-8 border-t-4 border-l-4 border-green-500"></div>
          <div class="absolute top-0 right-0 w-8 h-8 border-t-4 border-r-4 border-green-500"></div>
          <div class="absolute bottom-0 left-0 w-8 h-8 border-b-4 border-l-4 border-green-500"></div>
          <div class="absolute bottom-0 right-0 w-8 h-8 border-b-4 border-r-4 border-green-500"></div>
        </div>
      </div>
    </div>
  </div>

  <%# UI Elements %>
  <div class="fixed right-4 top-1/2 -translate-y-1/2 flex flex-col space-y-4 z-50">
    <%# Camera Switch Button %>
    <button
      data-action="click->camera-scanner#switchCamera"
      class="p-4 rounded-full bg-white/20 hover:bg-white/30 transition-colors"
      title="Switch Camera"
    >
      <i class="fas fa-camera-rotate text-white text-xl"></i>
    </button>

    <%# QR Code Toggle Button %>
    <button
      data-camera-scanner-target="qrButton"
      data-action="click->camera-scanner#toggleQRMode"
      class="p-4 rounded-full bg-white/20 hover:bg-white/30 transition-colors"
      title="Toggle QR Scanner"
    >
      <i class="fas fa-qrcode text-white text-xl"></i>
    </button>
  </div>

  <%# Status Message %>
  <div
    data-camera-scanner-target="scanResult"
    class="fixed top-4 left-1/2 -translate-x-1/2 px-4 py-2 bg-black/75 text-white rounded-lg text-sm hidden z-50"
  ></div>

  <%# Progress Bar %>
  <div class="fixed bottom-4 left-4 right-4 h-1 bg-white/20 rounded-full overflow-hidden z-50">
    <div
      data-camera-scanner-target="progressBar"
      class="h-full bg-blue-500 rounded-full transition-all duration-300 w-0"
    ></div>
  </div>

  <%# Product Details Container %>
  <div id="product_details" class="fixed bottom-0 left-0 right-0 bg-white dark:bg-gray-800 p-4 rounded-t-xl shadow-lg transform translate-y-full transition-transform duration-300 ease-in-out">
    <%# Product details will be loaded here via Turbo Stream %>
  </div>
</div>

<% content_for :head do %>
  <style>
      @keyframes scan {
          0% { transform: translateY(0); }
          50% { transform: translateY(256px); }
          100% { transform: translateY(0); }
      }

      .animate-scan {
          animation: scan 2s linear infinite;
      }
  </style>
<% end %>
<!doctype html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>QR Code Scanner</title>

  <script src="https://cdn.tailwindcss.com"></script>

  <script src="https://cdn.jsdelivr.net/npm/jsqr@1.4.0/dist/jsQR.min.js"></script>

  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet" />

  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <style>
      /* Custom styles for the scanner interface */
      body,
      html {
          margin: 0;
          padding: 0;
          height: 100%;
          overflow: hidden;
      }
      #video {
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          object-fit: cover;
      }
      #scanResult {
          position: fixed;
          top: 20px;
          left: 20px;
          right: 20px;
          background-color: rgba(0, 0, 0, 0.7);
          color: white;
          padding: 10px;
          border-radius: 8px;
          display: none;
          z-index: 1000;
      }
      .capture-button {
          position: fixed;
          bottom: 40px;
          left: 50%;
          transform: translateX(-50%);
          width: 70px;
          height: 70px;
          border-radius: 50%;
          background-color: rgba(255, 255, 255, 0.3);
          border: 3px solid white;
          display: flex;
          justify-content: center;
          align-items: center;
          cursor: pointer;
          z-index: 1000;
      }
      .capture-button::after {
          content: "";
          width: 54px;
          height: 54px;
          background-color: white;
          border-radius: 50%;
      }
      .side-buttons {
          position: fixed;
          right: 20px;
          top: 50%;
          transform: translateY(-50%);
          display: flex;
          flex-direction: column;
          gap: 20px;
          z-index: 1000;
      }
      .side-button {
          width: 50px;
          height: 50px;
          border-radius: 50%;
          background-color: rgba(255, 255, 255, 0.3);
          display: flex;
          justify-content: center;
          align-items: center;
          color: white;
          font-size: 24px;
          cursor: pointer;
      }
      /* Modal Styles */
      .modal {
          display: none; /* Hidden by default */
          position: fixed;
          z-index: 2000; /* Sit on top */
          left: 0;
          top: 0;
          width: 100%;
          height: 100%;
          overflow: auto; /* Enable scroll if needed */
          background-color: rgba(0, 0, 0, 0.5); /* Black w/ opacity */
      }
      .modal-content {
          background-color: #fefefe;
          margin: 10% auto; /* 10% from the top and centered */
          padding: 20px;
          border: 1px solid #888;
          width: 90%;
          max-width: 400px; /* Could be more or less, depending on screen size */
          border-radius: 8px;
      }
      .close-button {
          color: #aaa;
          float: right;
          font-size: 28px;
          font-weight: bold;
          cursor: pointer;
      }
      .close-button:hover,
      .close-button:focus {
          color: black;
          text-decoration: none;
      }
  </style>
</head>
<body class="bg-black">
<video id="video" playsinline></video>
<div id="scanResult" class="text-sm"></div>
<div class="capture-button" id="captureButton"></div>
<div class="side-buttons">
  <div class="side-button"><i class="fas fa-camera"></i></div>
  <div class="side-button"><i class="fas fa-cog"></i></div>
  <div class="side-button"><i class="fas fa-moon"></i></div>
  <div class="side-button"><i class="fas fa-qrcode"></i></div>
  <div class="side-button"><i class="fas fa-sliders-h"></i></div>
</div>


<div id="actionModal" class="modal">
  <div class="modal-content">
    <span class="close-button">&times;</span>
    <h2 class="text-xl font-semibold mb-4">QR Code Actions</h2>
    <div id="modalOptions" class="flex flex-col gap-4">

    </div>
  </div>
</div>

<script>
    // Elements
    const video = document.getElementById("video");
    const captureButton = document.getElementById("captureButton");
    const scanResult = document.getElementById("scanResult");
    const modal = document.getElementById("actionModal");
    const closeButton = document.querySelector(".close-button");
    const modalOptions = document.getElementById("modalOptions");
    let scanning = false;

    // Start scanning function
    function startScanning() {
        navigator.mediaDevices
          .getUserMedia({ video: { facingMode: "environment" } })
          .then(function (stream) {
              scanning = true;
              video.srcObject = stream;
              video.setAttribute("playsinline", true);
              video.play();
              requestAnimationFrame(tick);
          })
          .catch(function (error) {
              console.error("Error accessing the camera", error);
              showResult(`Error accessing the camera: ${error.message}`);
          });
    }

    // Stop scanning function
    function stopScanning() {
        scanning = false;
        if (video.srcObject) {
            video.srcObject.getTracks().forEach((track) => track.stop());
        }
        video.srcObject = null;
    }

    // URL validation function
    function isValidUrl(string) {
        try {
            new URL(string);
            return true;
        } catch (_) {
            return false;
        }
    }

    // Determine the type of scanned data
    function determineDataType(data) {
        if (isValidUrl(data)) {
            return "url";
        } else if (/^[A-Z0-9]{8,}$/.test(data)) {
            // Example SKU pattern
            return "sku";
        } else if (data.toLowerCase().includes("product")) {
            return "product";
        } else {
            return "other";
        }
    }

    // Main scanning loop
    function tick() {
        if (!scanning) return;

        if (video.readyState === video.HAVE_ENOUGH_DATA) {
            const canvas = document.createElement("canvas");
            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
            const ctx = canvas.getContext("2d");
            ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
            const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
            const code = jsQR(imageData.data, imageData.width, imageData.height);

            if (code) {
                console.log("Found QR code", code.data);
                stopScanning();
                showModal(code.data);
                return;
            } else {
                console.log("No QR code detected in this frame");
            }
        }
        requestAnimationFrame(tick);
    }

    // Display scan result temporarily
    function showResult(message) {
        scanResult.textContent = message;
        scanResult.style.display = "block";
        setTimeout(() => {
            scanResult.style.display = "none";
        }, 5000); // Hide after 5 seconds
    }

    // Display modal with actions based on scanned data
    function showModal(scannedData) {
        // Determine the type of scanned data
        const dataType = determineDataType(scannedData);

        // Clear previous options
        modalOptions.innerHTML = "";

        // Populate modal based on data type
        if (dataType === "url") {
            const urlButton = createModalButton("Open URL", () => {
                window.location.href = scannedData;
            });
            modalOptions.appendChild(urlButton);
        } else if (dataType === "sku") {
            const skuButton = createModalButton("View SKU Details", () => {

                //  display details fetched from the server

                alert(`Referencing SKU: ${scannedData}`);
            });
            modalOptions.appendChild(skuButton);
        } else if (dataType === "product") {
            const productButton = createModalButton("View Product Page", () => {

                // scannedData is a product ID
                const productId = scannedData; // Modify as needed
                const productUrl = `https://yourdomain.com/products/${productId}`;
                window.location.href = productUrl;
            });
            modalOptions.appendChild(productButton);
        } else {
            const genericButton = createModalButton("Show Data", () => {
                alert(`Scanned Data: ${scannedData}`);
            });
            modalOptions.appendChild(genericButton);
        }

        // Show the modal
        modal.style.display = "block";
    }

    // Create a button for the modal with specified text and click handler
    function createModalButton(text, onClick) {
        const button = document.createElement("button");
        button.className = "bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600";
        button.textContent = text;
        button.addEventListener("click", () => {
            onClick();
            modal.style.display = "none";
        });
        return button;
    }

    // Close the modal when the user clicks on <span> (x)
    closeButton.onclick = function () {
        modal.style.display = "none";
    };

    // Close the modal when the user clicks anywhere outside of the modal
    window.onclick = function (event) {
        if (event.target == modal) {
            modal.style.display = "none";
        }
    };

    // Toggle scanning when capture button is clicked
    captureButton.addEventListener("click", function () {
        if (scanning) {
            stopScanning();
        } else {
            startScanning();
        }
    });

    // Start scanning when the page loads
    startScanning();
</script>
</body>
</html>


<div class="relative h-screen overflow-hidden " data-controller="camera-scanner">

  <video
      data-camera-scanner-target="video"
      class="w-full h-full object-cover"
      playsinline
      autoplay
  ></video>


  <div
      data-camera-scanner-target="scannerOverlay"
      class="hidden"
  >
    <div class="scanner-overlay">
      <div class="scanner-line"></div>
      <div class="scan-corner top-left"></div>
      <div class="scan-corner top-right"></div>
      <div class="scan-corner bottom-left"></div>
      <div class="scan-corner bottom-right"></div>
    </div>
  </div>


  <div
      data-camera-scanner-target="scanResult"
      class="fixed top-4 left-1/2 -translate-x-1/2 px-4 py-2 bg-black/75 text-white rounded-lg text-sm hidden z-50"
  ></div>


  <div class="fixed right-4 top-1/2 -translate-y-1/2 flex flex-col space-y-4 z-50">
    <button
        data-action="click->camera-scanner#switchCamera"
        class="p-4 rounded-full bg-white/20 hover:bg-white/30 transition-colors"
        title="Switch Camera"
    >
      <i class="fas fa-camera text-white text-xl"></i>
    </button>

    <button
        data-action="click->camera-scanner#showSettings"
        class="p-4 rounded-full bg-white/20 hover:bg-white/30 transition-colors"
        title="Settings"
    >
      <i class="fas fa-cog text-white text-xl"></i>
    </button>

    <button
        data-action="click->camera-scanner#toggleDarkMode"
        class="p-4 rounded-full bg-white/20 hover:bg-white/30 transition-colors"
        title="Dark Mode"
    >
      <i class="fas fa-moon text-white text-xl"></i>
    </button>

    <button
        data-camera-scanner-target="qrButton"
        data-action="click->camera-scanner#toggleQRMode"
        class="p-4 rounded-full bg-white/20 hover:bg-white/30 transition-colors"
        title="Scan QR Code"
    >
      <i class="fas fa-qrcode text-white text-xl"></i>
    </button>

    <button
        data-action="click->camera-scanner#showAnalysis"
        class="p-4 rounded-full bg-white/20 hover:bg-white/30 transition-colors"
        title="Analysis"
    >
      <i class="fas fa-chart-bar text-white text-xl"></i>
    </button>
  </div>


  <div class="fixed bottom-4 left-4 right-4 h-1 bg-white/20 rounded-full overflow-hidden z-50">
    <div
        data-camera-scanner-target="progressBar"
        class="h-full bg-blue-500 rounded-full transition-all duration-300 w-0"
    ></div>
  </div>


</div>



<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
  <title>Inventory Scanner</title>


  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">

  <style>
    body, html {
      margin: 0;
      padding: 0;
      height: 100%;
      overflow: hidden;
      background-color: #000;
    }

    .scanner-overlay {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      width: 250px;
      height: 250px;
      border: 2px solid rgba(255, 255, 255, 0.5);
      border-radius: 20px;
      box-shadow: 0 0 0 9999px rgba(0, 0, 0, 0.5);
    }

    .scanner-line {
      position: absolute;
      width: 100%;
      height: 2px;
      background: #00ff00;
      animation: scan 2s linear infinite;
    }

    @keyframes scan {
      0% { top: 0; }
      100% { top: 100%; }
    }

    .capture-button {
      position: absolute;
      bottom: 40px;
      left: 50%;
      transform: translateX(-50%);
      width: 70px;
      height: 70px;
      border-radius: 50%;
      background: rgba(255, 255, 255, 0.3);
      border: 3px solid #fff;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .capture-button:active {
      transform: translateX(-50%) scale(0.95);
      background: rgba(255, 255, 255, 0.4);
    }

    .side-buttons {
      position: absolute;
      right: 20px;
      top: 50%;
      transform: translateY(-50%);
      display: flex;
      flex-direction: column;
      gap: 20px;
    }

    .side-button {
      width: 50px;
      height: 50px;
      border-radius: 25px;
      background: rgba(255, 255, 255, 0.2);
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .side-button i {
      color: #fff;
      font-size: 20px;
    }

    .side-button:active {
      transform: scale(0.95);
      background: rgba(255, 255, 255, 0.3);
    }

    .progress-bar {
      position: absolute;
      bottom: 20px;
      left: 20px;
      right: 20px;
      height: 4px;
      background: rgba(255, 255, 255, 0.2);
      border-radius: 2px;
      overflow: hidden;
    }

    .progress-bar-fill {
      height: 100%;
      background: #00ff00;
      width: 0%;
      transition: width 0.3s ease;
    }

    #scanResult {
      position: absolute;
      top: 20px;
      left: 20px;
      right: 20px;
      padding: 10px;
      background: rgba(0, 0, 0, 0.7);
      color: #fff;
      border-radius: 8px;
      text-align: center;
      display: none;
    }

    .scan-corners {
      position: absolute;
      width: 20px;
      height: 20px;
      border-color: #00ff00;
      border-style: solid;
    }

    .top-left {
      top: -2px;
      left: -2px;
      border-width: 3px 0 0 3px;
    }

    .top-right {
      top: -2px;
      right: -2px;
      border-width: 3px 3px 0 0;
    }

    .bottom-left {
      bottom: -2px;
      left: -2px;
      border-width: 0 0 3px 3px;
    }

    .bottom-right {
      bottom: -2px;
      right: -2px;
      border-width: 0 3px 3px 0;
    }
  </style>
</head>

<body class="bg-black">
  <div data-controller="camera-scanner">
    <video
      id="video"
      data-camera-scanner-target="video"
      class="w-full h-full object-cover"
      playsinline
      autoplay
    ></video>

    <div class="scanner-overlay">
      <div class="scanner-line"></div>
      <div class="scan-corners top-left"></div>
      <div class="scan-corners top-right"></div>
      <div class="scan-corners bottom-left"></div>
      <div class="scan-corners bottom-right"></div>
    </div>

    <div id="scanResult"
         data-camera-scanner-target="scanResult"
         class="text-sm">
    </div>

    <div class="side-buttons">
      <button class="side-button"
              data-action="click->camera-scanner#switchCamera">
        <i class="fas fa-camera-rotate"></i>
      </button>

      <button class="side-button"
              data-action="click->camera-scanner#toggleTorch">
        <i class="fas fa-bolt"></i>
      </button>

      <button class="side-button"
              data-action="click->camera-scanner#toggleFullscreen">
        <i class="fas fa-expand"></i>
      </button>
    </div>

    <div class="progress-bar">
      <div class="progress-bar-fill"
           data-camera-scanner-target="progressBar">
      </div>
    </div>

    <div id="quickview">
      <%# Product quickview will be rendered here via Turbo Stream %>
    </div>
  </div>

  <%# Add Turbo frame for product details %>

</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
  <title>Inventory Scanner</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/jsqr@1.4.0/dist/jsQR.min.js"></script>
  <style>
      body, html {
          margin: 0;
          padding: 0;
          height: 100%;
          overflow: hidden;
      }

  </style>
</head>
<body class="">
<video id="video" playsinline></video>
<div class="ui-overlay">
  <div id="scanResult" class="text-sm"></div>
  <div class="capture-button p-2 bg-slate-200" id="captureButton"></div>
  <div class="side-buttons">
    <div class="side-button p-2 bg-slate-200" id="cameraButton"><i class="fas fa-camera"></i></div>
    <div class="side-button p-2 bg-slate-200" id="settingsButton"><i class="fas fa-cog"></i></div>
    <div class="side-button p-2 bg-slate-200" id="darkModeButton"><i class="fas fa-moon"></i></div>
    <div class="side-button p-2 bg-slate-200" id="qrCodeButton"><i class="fas fa-qrcode"></i></div>
    <div class="side-button p-2 bg-slate-200" id="analysisButton"><i class="fas fa-chart-bar"></i></div>
  </div>
  <div class="image-preview" id="imagePreview"></div>
  <div class="progress-bar"><div class="progress-bar-fill" id="progressBar"></div></div>
</div>

<script>
    // DOM elements
    const video = document.getElementById('video');
    const captureButton = document.getElementById('captureButton');
    const scanResult = document.getElementById('scanResult');
    const imagePreview = document.getElementById('imagePreview');
    const progressBar = document.getElementById('progressBar');
    const cameraButton = document.getElementById('cameraButton');
    const settingsButton = document.getElementById('settingsButton');
    const darkModeButton = document.getElementById('darkModeButton');
    const qrCodeButton = document.getElementById('qrCodeButton');
    const analysisButton = document.getElementById('analysisButton');

    // State variables
    let capturedImages = [];
    let currentCameraIndex = 0;
    let cameras = [];
    let scanning = false;
    let scannerOverlay = null;

    // QR scanning setup
    let qrCanvas = document.createElement('canvas');
    let qrContext = qrCanvas.getContext('2d', { willReadFrequently: true });

    // Start the camera with specific constraints
    async function startCamera(requestedFacingMode = 'environment') {
        try {
            // Get list of cameras
            const devices = await navigator.mediaDevices.enumerateDevices();
            cameras = devices.filter(device => device.kind === 'videoinput');
            console.log('Available cameras:', cameras);

            if (cameras.length === 0) {
                throw new Error('No cameras found');
            }

            // Stop any existing stream
            if (video.srcObject) {
                video.srcObject.getTracks().forEach(track => track.stop());
            }

            // Set up constraints
            const constraints = {
                video: {
                    facingMode: requestedFacingMode,
                    width: { ideal: 1920 },
                    height: { ideal: 1080 },
                    aspectRatio: { ideal: 1.7777777778 }
                },
                audio: false
            };

            console.log('Requesting camera with constraints:', constraints);
            const stream = await navigator.mediaDevices.getUserMedia(constraints);
            video.srcObject = stream;

            // Wait for video to be ready
            await new Promise((resolve) => {
                video.onloadedmetadata = () => {
                    video.play().then(resolve);
                };
            });

            console.log('Camera started successfully');
            return true;

        } catch (error) {
            console.error("Camera start error:", error);
            showResult(`Camera error: ${error.message}`);
            return false;
        }
    }

    // Enhanced camera switch function
    async function switchCamera() {
        const currentFacingMode = currentCameraIndex === 0 ? 'environment' : 'user';
        const newFacingMode = currentFacingMode === 'environment' ? 'user' : 'environment';

        currentCameraIndex = (currentCameraIndex + 1) % 2;
        console.log(`Switching to camera: ${newFacingMode}`);

        await startCamera(newFacingMode);
    }

    // Capture image function
    function captureImage() {
        qrCanvas.width = video.videoWidth;
        qrCanvas.height = video.videoHeight;
        qrContext.drawImage(video, 0, 0, qrCanvas.width, qrCanvas.height);
        const imageDataUrl = qrCanvas.toDataURL('image/jpeg');
        capturedImages.push(imageDataUrl);
        updateImagePreview();

        if (capturedImages.length >= 4) {
            processImages();
        }
    }

    // Update image preview
    function updateImagePreview() {
        imagePreview.innerHTML = '';
        capturedImages.forEach(img => {
            const imgElement = document.createElement('img');
            imgElement.src = img;
            imagePreview.appendChild(imgElement);
        });
    }

    // Process captured images
    async function processImages() {
        showResult("Processing images...");

        await simulateProcessing("Running YOLO", 33);
        await simulateProcessing("Running SAM", 66);
        await simulateProcessing("Running LightGlue", 100);

        setTimeout(() => {
            const mockResult = {
                sku: "INV" + Math.floor(Math.random() * 10000),
                price: "$" + (Math.random() * 100).toFixed(2),
                name: "Sample Product " + Math.floor(Math.random() * 100)
            };
            showResult(`Analysis Complete\nSKU: ${mockResult.sku}\nPrice: ${mockResult.price}\nName: ${mockResult.name}`);
        }, 1000);
    }

    // Simulate processing steps
    function simulateProcessing(step, progress) {
        return new Promise(resolve => {
            showResult(step);
            progressBar.style.width = `${progress}%`;
            setTimeout(resolve, 1000);
        });
    }

    // QR Scanning functions
    function startQRScanning() {
        if (!scanning) return;

        try {
            if (video.readyState === video.HAVE_ENOUGH_DATA &&
                video.videoWidth > 0 &&
                video.videoHeight > 0) {

                // Set canvas size to match video
                qrCanvas.width = video.videoWidth;
                qrCanvas.height = video.videoHeight;

                // Draw current video frame
                qrContext.drawImage(video, 0, 0, qrCanvas.width, qrCanvas.height);

                // Get image data for QR detection
                const imageData = qrContext.getImageData(0, 0, qrCanvas.width, qrCanvas.height);

                // Attempt QR code detection
                const code = jsQR(imageData.data, imageData.width, imageData.height, {
                    inversionAttempts: "dontInvert",
                });

                if (code) {
                    console.log("QR Code detected:", code.data);
                    handleQRCode(code.data);
                    return;
                }
            }

            // Continue scanning
            if (scanning) {
                requestAnimationFrame(startQRScanning);
            }
        } catch (error) {
            console.error("QR scanning error:", error);
            showResult("QR scanning error");
        }
    }

    // Handle QR code data
    async function handleQRCode(data) {
        // UUID validation
        const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
        if (!uuidRegex.test(data)) {
            showResult("Invalid QR code format");
            return;
        }

        showResult("Processing QR code...");
        progressBar.style.width = '33%';

        try {
            // Use Turbo to load the product quickview
            const response = await fetch(`/scanner/lookup/${data}`, {
                headers: {
                    'Accept': 'text/vnd.turbo-stream.html',
                    'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
                }
            });

            if (!response.ok) throw new Error('Product not found');

            const html = await response.text();
            Turbo.renderStreamMessage(html);

            progressBar.style.width = '100%';
            showResult("Product found!");

            // Pause scanning while showing product
            scanning = false;
            if (scannerOverlay) {
                scannerOverlay.style.display = 'none';
            }
            qrCodeButton.classList.remove('bg-blue-500');

        } catch (error) {
            console.error('Product lookup error:', error);
            showResult("Product not found");
            progressBar.style.width = '0%';
        }
    }

    // Create scanner overlay
    function createScannerOverlay() {
        scannerOverlay = document.createElement('div');
        scannerOverlay.className = 'scanner-overlay';
        scannerOverlay.style.cssText = `
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 250px;
        height: 250px;
        border: 2px solid rgba(255, 255, 255, 0.5);
        border-radius: 20px;
        box-shadow: 0 0 0 9999px rgba(0, 0, 0, 0.5);
    `;

        const scanLine = document.createElement('div');
        scanLine.style.cssText = `
        position: absolute;
        width: 100%;
        height: 2px;
        background: #00ff00;
        animation: scan 2s linear infinite;
    `;

        const style = document.createElement('style');
        style.textContent = `
        @keyframes scan {
            0% { top: 0; }
            100% { top: 100%; }
        }
    `;

        document.head.appendChild(style);
        scannerOverlay.appendChild(scanLine);
        document.querySelector('.ui-overlay').appendChild(scannerOverlay);
    }

    // Toggle QR scanning mode
    function toggleQRMode() {
        scanning = !scanning;

        if (scanning) {
            if (!scannerOverlay) {
                createScannerOverlay();
            }
            scannerOverlay.style.display = 'block';
            qrCodeButton.classList.add('bg-blue-500');
            showResult("QR scanning active");
            startQRScanning();
            console.log("QR scanning started");
        } else {
            if (scannerOverlay) {
                scannerOverlay.style.display = 'none';
            }
            qrCodeButton.classList.remove('bg-blue-500');
            showResult("QR scanning disabled");
            console.log("QR scanning stopped");
        }
    }

    // Show result message
    function showResult(message) {
        console.log("Scanner message:", message);
        scanResult.textContent = message;
        scanResult.style.display = 'block';
        setTimeout(() => {
            scanResult.style.display = 'none';
        }, 3000);
    }

    // Toggle dark mode
    function toggleDarkMode() {
        document.body.classList.toggle('dark');
    }

    // Event listeners
    captureButton.addEventListener('click', captureImage);
    cameraButton.addEventListener('click', () => {
        console.log("Camera switch requested");
        switchCamera();
    });
    darkModeButton.addEventListener('click', toggleDarkMode);
    settingsButton.addEventListener('click', () => showResult("Settings clicked"));
    qrCodeButton.addEventListener('click', () => {
        console.log("QR mode toggle requested");
        toggleQRMode();
    });
    analysisButton.addEventListener('click', () => showResult("Analysis clicked"));

    // Initialize on page load
    document.addEventListener('DOMContentLoaded', () => {
        console.log("Initializing camera...");
        startCamera('environment');
    });

    // Cleanup on page unload
    window.addEventListener('beforeunload', () => {
        if (video.srcObject) {
            video.srcObject.getTracks().forEach(track => track.stop());
        }
    });
</script>
</body>
</html>
-->