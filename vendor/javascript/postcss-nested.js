// postcss-nested@6.2.0 downloaded from https://ga.jspm.io/npm:postcss-nested@6.2.0/index.js

import*as e from"postcss";import*as t from"postcss-selector-parser";var r=e;try{"default"in e&&(r=e.default)}catch(e){}var l=t;try{"default"in t&&(l=t.default)}catch(e){}var n={};const{AtRule:o,Rule:s}=r;let a=l;function parse(e,t){let r;try{a((e=>{r=e})).processSync(e)}catch(r){throw e.includes(":")?t?t.error("Missed semicolon"):r:t?t.error(r.message):r}return r.at(0)}function interpolateAmpInSelector(e,t){let r=false;e.each((e=>{if(e.type==="nesting"){let l=t.clone({});e.value!=="&"?e.replaceWith(parse(e.value.replace("&",l.toString()))):e.replaceWith(l);r=true}else"nodes"in e&&e.nodes&&interpolateAmpInSelector(e,t)&&(r=true)}));return r}function mergeSelectors(e,t){let r=[];e.selectors.forEach((l=>{let n=parse(l,e);t.selectors.forEach((e=>{if(!e)return;let l=parse(e,t);let o=interpolateAmpInSelector(l,n);if(!o){l.prepend(a.combinator({value:" "}));l.prepend(n.clone({}))}r.push(l.toString())}))}));return r}function breakOut(e,t){let r=e.prev();t.after(e);while(r&&r.type==="comment"){let e=r.prev();t.after(r);r=e}return e}function createFnAtruleChilds(e){return function atruleChilds(t,r,l,n=l){let o=[];r.each((s=>{s.type==="rule"&&l?n&&(s.selectors=mergeSelectors(t,s)):s.type==="atrule"&&s.nodes?e[s.name]?atruleChilds(t,s,n):r[u]!==false&&o.push(s):o.push(s)}));if(l&&o.length){let e=t.clone({nodes:[]});for(let t of o)e.append(t);r.prepend(e)}}}function pickDeclarations(e,t,r){let l=new s({nodes:[],selector:e});l.append(t);r.after(l);return l}function atruleNames(e,t){let r={};for(let t of e)r[t]=true;if(t)for(let e of t)r[e.replace(/^@/,"")]=true;return r}function parseRootRuleParams(e){e=e.trim();let t=e.match(/^\((.*)\)$/);if(!t)return{selector:e,type:"basic"};let r=t[1].match(/^(with(?:out)?):(.+)$/);if(r){let e=r[1]==="with";let t=Object.fromEntries(r[2].trim().split(/\s+/).map((e=>[e,true])));if(e&&t.all)return{type:"noop"};let escapes=e=>!!t[e];t.all?escapes=()=>true:e&&(escapes=e=>e!=="all"&&!t[e]);return{escapes:escapes,type:"withrules"}}return{type:"unknown"}}function getAncestorRules(e){let t=[];let r=e.parent;while(r&&r instanceof o){t.push(r);r=r.parent}return t}function unwrapRootRule(e){let t=e[c];if(t){let r=e.nodes;let l;let n=-1;let o;let s;let a;let u=getAncestorRules(e);u.forEach(((e,r)=>{if(t(e.name)){l=e;n=r;s=a}else{let t=a;a=e.clone({nodes:[]});t&&a.append(t);o=o||a}}));if(l)if(s){let e=o;e.append(r);l.after(s)}else l.after(r);else e.after(r);if(e.next()&&l){let t;u.slice(0,n+1).forEach(((r,l,n)=>{let o=t;t=r.clone({nodes:[]});o&&t.append(o);let s=[];let a=n[l-1]||e;let u=a.next();while(u){s.push(u);u=u.next()}t.append(s)}));t&&(s||r[r.length-1]).after(t)}}else e.after(e.nodes);e.remove()}const u=Symbol("rootRuleMergeSel");const c=Symbol("rootRuleEscapes");function normalizeRootRule(e){let{params:t}=e;let{escapes:r,selector:l,type:n}=parseRootRuleParams(t);if(n==="unknown")throw e.error(`Unknown @${e.name} parameter ${JSON.stringify(t)}`);if(n==="basic"&&l){let t=new s({nodes:e.nodes,selector:l});e.removeAll();e.append(t)}e[c]=r;e[u]=r?!r("all"):n==="noop"}const p=Symbol("hasRootRule");n=(e={})=>{let t=atruleNames(["media","supports","layer","container","starting-style"],e.bubble);let r=createFnAtruleChilds(t);let l=atruleNames(["document","font-face","keyframes","-webkit-keyframes","-moz-keyframes"],e.unwrap);let n=(e.rootRuleName||"at-root").replace(/^@/,"");let o=e.preserveEmpty;return{Once(e){e.walkAtRules(n,(t=>{normalizeRootRule(t);e[p]=true}))},postcssPlugin:"postcss-nested",RootExit(e){if(e[p]){e.walkAtRules(n,unwrapRootRule);e[p]=false}},Rule(e){let s=false;let a=e;let c=false;let p=[];e.each((o=>{if(o.type==="rule"){if(p.length){a=pickDeclarations(e.selector,p,a);p=[]}c=true;s=true;o.selectors=mergeSelectors(e,o);a=breakOut(o,a)}else if(o.type==="atrule"){if(p.length){a=pickDeclarations(e.selector,p,a);p=[]}if(o.name===n){s=true;r(e,o,true,o[u]);a=breakOut(o,a)}else if(t[o.name]){c=true;s=true;r(e,o,true);a=breakOut(o,a)}else if(l[o.name]){c=true;s=true;r(e,o,false);a=breakOut(o,a)}else c&&p.push(o)}else o.type==="decl"&&c&&p.push(o)}));p.length&&(a=pickDeclarations(e.selector,p,a));if(s&&o!==true){e.raws.semicolon=true;e.nodes.length===0&&e.remove()}}}};n.postcss=true;var i=n;const f=n.postcss;export{i as default,f as postcss};

